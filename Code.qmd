---
title: "Codes"
---

# Stacked Bar Chart

```{r}
#| message: false
#| warning: false
#| paged-print: false
#Download Library
library(tidyverse)
library(ggplot2)
library(scales)
library(plotly)

#Import Dataset
OpioidData = read.csv("C:/Users/Sean/Desktop/State Opioid Dispensing Rates.csv") #make sure its forward slash

#CreatingDataset
long_data <- OpioidData %>%
  filter(YEAR %in% c(2019, 2023)) %>%
  rename(Year = YEAR, Rate = opioid_dispensing_rate) %>%
  group_by(STATE_NAME, STATE_ABBREV) %>%
  mutate(
    pct_change = round((Rate[Year == 2023] - Rate[Year == 2019]) / Rate[Year == 2019] * 100)) #round is nearest .1 #trying to add percent change

# Makes the graph go Descending
ordered_states <- long_data %>%
  filter(Year == 2019) %>%
  arrange(desc(Rate)) %>%
  pull(STATE_ABBREV)

long_data$STATE_ABBREV <- factor(long_data$STATE_ABBREV, levels = ordered_states)


stackedbar <- ggplot() +
  # 2019 bars (red - bad)
  geom_col(
    data = long_data %>% filter(Year == 2019),
    aes(x = STATE_ABBREV, y = Rate, Year = "2019"),
    fill = "red", alpha = 0.4, width = 0.6
  ) +
  # 2023 bars (blue)
  geom_col(
    data = long_data %>% filter(Year == 2023),
    aes(x = STATE_ABBREV, y = Rate, Year = "2023"),
    fill = "blue", width = 0.6
  ) +
  labs(
    x = "State",
    y = "Opioid Dispensing Rate",
    title = "Opioid Dispensing Rates by State",
    subtitle ="2023 Blue"
  ) +
  
    scale_fill_manual(
    values = c("2019" = "red", "2023" = "blue"),
    labels = c("2019" = "Year 2019", "2023" = "Year 2023")
  )+
  theme_minimal() +coord_flip()

(stackedbar)
```

# Heat Map

```{r}
#| message: false
#| warning: false
#| paged-print: false
library(plotly)
library(dplyr)
library(tidyr)
library(usmap)

MapRedesign <- read.csv("C:/Users/Sean/Desktop/State Opioid Dispensing Rates.csv") %>%
  filter(YEAR %in% c(2019, 2023))

#adds 2019 & 2023 columns
BothYears <- MapRedesign %>%
  select(STATE_NAME, STATE_ABBREV, YEAR, opioid_dispensing_rate) %>%
  pivot_wider(names_from = YEAR, values_from = opioid_dispensing_rate) %>%
  rename(state = STATE_NAME)  

#creates the map
mapOp <- plot_usmap(data = BothYears, values = "2019") +
  scale_fill_continuous(
    name = "Opioid Rates 2019",
    low = "#FFE5E5",
    high = "#CC0000",
    label = scales::comma
  ) +
  theme(legend.position = "right") +
  ggtitle("US Opioid Dispensing Rates by State (2019)")

#More interactive with hover and plotly
# Create hover text
BothYears$hover <- paste0(
  "<b>State:</b> ", BothYears$STATE_NAME, "<br>",
  "<b>2019 Rate:</b> ", BothYears$`2019`
)

# Convert to interactive Plotly
mapOp_interactive <- ggplotly(mapOp, tooltip = "fill")

mapOp_interactive
```

# Bar Chart

```{r}
#| message: false
#| warning: false
#| paged-print: false
#Setup Code
library(ggplot2)
library(leaflet)
library(dplyr)
library(scales)
library(tigris)
library(sf)
library(forcats)
city_rain <- read.csv("City_Rain.csv")

# Add US Average Rainfall
city_rain2 <- city_rain %>%
  add_row(City = "U.S. Average Value", InchesOfRain = 2.5)

# Plot
ggplot(city_rain2, aes(x = fct_reorder(City, -InchesOfRain), y = InchesOfRain)) +
  geom_col(fill = "#deebf7", color = "black") +
  labs(title = "10 U.S. Cities with the Least Rainfall",
       x = "City",
       y = "Inches of Rain (Monthly AVG)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Dynamic Map

```{r}
#| message: false
#| warning: false
#| paged-print: false
# Set options to suppress tigris progress bar and enable caching
options(tigris_progress = FALSE, tigris_use_cache = TRUE)

# Load and prepare US state shapes
states <- states(cb = TRUE, resolution = "20m") %>%
  st_transform("+proj=longlat +datum=WGS84")

# Create rainfall color palette
rain_pal <- colorNumeric(palette = "Blues", domain = city_rain$InchesOfRain)

# Build Leaflet map
leaflet(city_rain) %>%
  addProviderTiles(providers$Esri.WorldImagery) %>%
  fitBounds(-125, 24, -66, 50) %>%
  addPolygons(
    data = states,
    fill = FALSE,
    weight = 1,
    color = "white",
    opacity = 0.5
  ) %>%
  addCircleMarkers(
    lng = ~Longitude,
    lat = ~Latitude,
    radius = 10,
    stroke = TRUE,
    color = "black",
    weight = 1,
    opacity = 0.8,
    fillColor = ~rain_pal(InchesOfRain),
    fillOpacity = 0.9,
    popup = ~paste0(
      "<div style='background-color: rgba(255, 255, 255, 0.9); border-radius: 5px; padding: 6px;'>",
      "<strong>", City, "</strong><br>",
      "Avg Monthly Rainfall: ", InchesOfRain, " in<br>",
      "Elevation: ", comma(ElevationFeet), " ft<br>",
      "Metro Population (2024): ", comma(MetroAreaPopJuly1st2024), "<br>",
      "Avg High Temp: ", round(AnnualAVGHighTemperatureF, 1), " °F<br>",
      "Avg Low Temp: ", round(AnnualAVGLowTemperatureF, 1), " °F<br>",
      "Avg Humidity: ", round(AnnualAVGRelativeHumidity, 1), " %",
      "</div>"
    )
  ) %>%
  addLabelOnlyMarkers(
    lng = ~Longitude,
    lat = ~Latitude,
    label = ~as.character(Rank),
    labelOptions = labelOptions(
      noHide = TRUE,
      direction = 'center',
      textOnly = TRUE,
      style = list(
        "color" = "orange",
        "font-weight" = "bold",
        "font-size" = "14px",
        "text-shadow" = "1px 1px 2px black"
      )
    )
  ) %>%
  addLegend(
    "bottomright",
    pal = rain_pal,
    values = ~InchesOfRain,
    title = "Inches of Rain",
    opacity = 1
  )
```


